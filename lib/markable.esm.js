/**
 * markable - make non-English Markdown plain text markable
 * Copyright (c) 2020, Guxi11. (MIT Licensed)
 * https://github.com/hbhde/markable
 */

/**
 * DO NOT EDIT THIS FILE
 * The code in this file is generated from files in ./src/
 */

/**
 * Helpers
 */

const caret = /(^|[^\[])\^/g;
function edit(regex) {
  regex = regex.source || regex;
  const obj = {
    replace: (name, val) => {
      val = val.source || val;
      val = val.replace(caret, '$1');
      regex = regex.replace(name, val);
      return obj;
    },
    replaceAllByDict: (dict) => {
      for (let key in dict) {
        let name = key, val = dict[key];
        val = val.source || val;
        val = val.replace(caret, '$1');
        regex = regex.replace(RegExp(name, 'g'), val);
      }
      return obj;
    },
    getRegex: () => {
      return new RegExp(regex);
    }
  };
  return obj;
}

var helpers = {
  edit
};

/**
 * Symbols
 * Supported Languages: Chinese
 */
const symbols = {
  '=`=': /·/,
  '=~=': /～/,
  '={=': /「/,
  '=}=': /」/,
  '=<=': /《〈/,
  '=>=': /》〉/,
  '=:=': /:：/,
  '=!=': /!！/,
  '=_=': /——/,
  '=$=': /¥/,
  '=!=': /！/,
  '="=': /"“”/,
  "='=": /'‘’/,
  '=\\\\\\[=': /【/, // Escaping twice
  '=\\\\\\]=': /】/,
  '=\\\\\\(=': /（/,
  '=\\\\\\)=': /）/,
  '=\\\\\\|=': /｜/,
  '=\\\\\\.=': /。/
};

var symbols_1 = symbols;

const { edit: edit$1 } = helpers;


/**
 * Block-Level Grammar
 */
const block = {
  newline: /^\n+/,
  fences: /^ {0,3}([=`=]{3,}(?=[^\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[=`=]* *(?:\n+|$)|$)/,
  blockquote: /^( {0,3}[=>=] ?(paragraph|[^\n]*)(?:\n|$))+/,
  _paragraph: /^([^\n]+(?:\n(?!blockquote)[^\n]+)*)/,
  text: /^[^\n]+/
};

block.paragraph = edit$1(block._paragraph)
  .replace('blockquote', ' {0,3}>')
  .getRegex();

block.blockquote = edit$1(block.blockquote)
  .replace('paragraph', block.paragraph)
  .getRegex();

/**
 * Inline-Level Grammar
 */
const inline = {
  link: /^[=!=]?[=\[=](label)[=\]=][=\(=]\s*(href)(?:\s+(title))?\s*[=\)=]/,
  reflink: /^[=!=]?[=\[=](label)[=\]=][=\[=](?!\s*[=\]=])((?:\\[=\[==\]=]?|[^=\[==\]=\\])+)[=\]=]/,
  nolink: /^[=!=]?[=\[=](?!\s*[=\]=])((?:[=\[=][^=\[==\]=]*[=\]=]|\\[=\[==\]=]|[^=\[==\]=])*)[=\]=](?:[=\[=][=\]=])?/,
  code: /^([=`=]+)([^=`=]|[^=`=][\s\S]*?[^=`=])\1(?![=`=])/,
  text: /^([=`=]+|[^=`=])(?:[\s\S]*?(?:(?=[\\<!=\[==`=*]|\b_|$)|[^ ](?= {2,}\n))|(?= {2,}\n))/
};

inline._label = /(?:[=\[=][^=\[==\]=]*[=\]=]|\\.|[=`=][^=`=]*[=`=]|[^=\[==\]=\\=`=])*?/;
inline._href = /<(?:\\[<>]?|[^\s<>\\])*>|[^\s\x00-\x1f]*/;
inline._title = /[="=](?:\\[="=]?|[^="=\\])*[="=]|[='=](?:\\[='=]?|[^='=\\])*[='=]|[=\(=](?:\\[=\)=]?|[^)\\])*[=\)=]/;

inline.link = edit$1(inline.link)
  .replace('label', inline._label)
  .replace('href', inline._href)
  .replace('title', inline._title)
  .getRegex();

inline.reflink = edit$1(inline.reflink)
  .replace('label', inline._label)
  .getRegex();

/**
 * Grammar Translate Symbols
 */
[block, inline].map(grammer => {
  for (let key in grammer) {
    grammer[key] = edit$1(grammer[key])
      .replaceAllByDict(symbols_1)
      .getRegex();
  }
});

var rules = {
  block,
  inline
};

const { inline: inline$1 } = rules;

/**
 * InlineTranslator
 */
var InlineTranslator_1 = class InlineTranslator {
  constructor() {
    this.rules = inline$1;
  }

  static translate(src) {
    const translator = new InlineTranslator();
    return translator.translate(src);
  }

  translate(src) {
    let dest = '',
        cap;

    while(src) {

      // link
      if (cap = this.rules.link.exec(src)) {
        src = src.substring(cap[0].length);
        dest += cap[0]
          .replace(/！/, '!')
          .replace(/【/, '[')
          .replace(/】/, ']')
          .replace(/（/, '(')
          .replace(/）/, ')')
          .replace(/[“”]/g, '"');
        continue;
      }

      // code
      if (cap = this.rules.code.exec(src)) {
        src = src.substring(cap[0].length);
        dest += cap[0]
          .replace(/·/g, '`');
        continue;
      }

      // text
      if (cap = this.rules.text.exec(src)) {
        src = src.substring(cap[0].length);
        dest += cap[0];
        continue;
      }
    }

    return dest;
  }
};

const { block: block$1 } = rules;


/**
 * Block Translator
 */
var Translator_1 = class Translator {
  constructor() {
    this.rules = block$1;
    this.dest = '';
    this.inlineTranslator = new InlineTranslator_1();
  }

  static translate(src) {
    const translator = new Translator();
    return translator.translate(src);
  }

  translate(src) {
    // preprocessing
    src = src
      .replace(/\r\n|\r/g, '\n')
      .replace(/\t/g, '    ');

    let cap;

    while(src) {
      // newline
      if (cap = this.rules.newline.exec(src)) {
        src = src.substring(cap[0].length);
        this.dest += cap[0];
      }

      // fences
      if (cap = this.rules.fences.exec(src)) {
        src = src.substring(cap[0].length);
        this.dest += cap[0]
          .replace(/[·]{3}/g, '```');
      }

      // blockquote
      if (cap = this.rules.blockquote.exec(src)) {
        src = src.substring(cap[0].length);
        this.dest += this.inlineTranslator.translate(cap[0])
          .replace(/[》〉]/g, '>');
      }

      // text
      if (cap = this.rules.text.exec(src)) {
        src = src.substring(cap[0].length);
        this.dest += this.inlineTranslator.translate(cap[0]);
      }
    }

    return this.dest;
  }
};

/**
 * Markable
 */
function markable(src) {
  // throw error in case of non string input
  if (typeof src === 'undefined' || src === null) {
    throw new Error('markable(): input parameter is undefined or null');
  }
  if (typeof src !== 'string') {
    throw new Error('markable(): input parameter is of type '
      + Object.prototype.toString.call(src) + ', string expected');
  }

  return Translator_1.translate(src);
}
/**
 * Expose
 */
var markable_1 = markable;

export default markable_1;
